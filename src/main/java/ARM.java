import java.util.ArrayList;
import java.util.List;

public class ARM {
    public static void filterCombingData() {
        // Statische Testdaten.
        // ToDo: Implementierung einer automatisierten Datenverarbeitung
        int[] testData = {896, 862, 848, 898, 790, 870, 892, 860, 870, 840, 892, 874, 890, 840, 836, 882, 908, 888, 846, 826, 872, 828, 900, 890, 850, 878, 904, 1004, 734, 902, 1036, 944, 992, 984, 944, 1094, 1050, 1094, 1192, 974, 940, 954, 1010, 1012, 978, 1288, 1594, 1408, 1144, 1034, 756, 650, 656, 628, 494, 512, 584, 512, 426, 440, 384, 524, 616, 554, 518, 400, 478, 718, 698, 514, 520, 244, 490, 268, 386, 250, 654, 796, 746, 758, 884, 680, 654, 520, 688, 952, 1110, 1310, 1258, 1020, 1202, 910, 960, 462, 862, 908, 1116, 918, 1054, 1490, 960, 1084, 1294, 1472, 1730, 1074, 198, -580, 326, 670, 296, 62, -114, -260, -592, 42, -2994, -1318, -1658, -2612, -2874, -2684, -1700, -1964, -1394, -1116, -462, -88, -78, -322, -116, 82, 236, 602, 816, 1180, 1136, 1518, 1436, 1554, 1546, 2038, 1924, 2796, 3386, 3340, 2298, 1842, 1404, 1492, 1944, 2826, 3056, 2966, 3764, 3642, 3910, 4252, 4602, 4114, 3766, 4244, 4910, 3938, 4126, 4340, 4008, 4174, 4230, 2934, 990, 1062, 4024, 6080, 5514, 4920, 4766, 4832, 4058, 3808, 5058, 5170, 4930, 4578, 4716, 4134, 4606, 4306, 4898, 4882, 4290, 3378, 3082, 2908, 2726, 2698, 1802, 1526, 924, 1074, 534, 274, 116, 134, -66, 396, 612, 1456, 1712, 1790, 5936, 3102, 2870, 1978, 1872, 2136, 2380, 2938, 3052, 2742, 3050, 3200, 3648, 3818, 3524, 3406, 3794, 4054, 3652, 3876, 4010, 3988, 3858, 3970, 3984, 3394, 3530, 3474, 3060, 6640, 7302, 5284, 4220, 3990, 4648, 5002, 5030, 4928, 4920, 4286, 4306, 4654, 5672, 5852, 6246, 5482, 4660, 4706, 3904, 3652, 2986, 2370, 1374, 880, 632, 368, 1406, 1600, 1774, 2068, 1968, 2622, 2792, 2646, 2594, 2182, 4478, 3446, 3408, 3666, 2766, 3420, 4208, 3596, 3846, 3626, 3826, 4160, 4072, 3982, 3844, 3614, 4148, 3570, 3622, 4454, 5516, 4898, 4210, 4484, 4588, 3904, 4110, 4356, 4176, 3624, 3974, 4020, 4606, 4114, 4068, 4268, 4444, 4642, 4016, 4622, 4532, 4258, 4086, 4224, 4620, 5294, 5714, 5466, 5168, 5500, 5354, 3936, 3998, 4338, 3676, 3148, 3374, 3336, 2288, 2348, 2756, 2528, 1238, 1712, 1878, 1862, 1048, 850, 1012, 912, 1074, 724, 696, 1376, 1558, 1790, 2304, 2412, 4770, 2892, 2716, 2278, 2332, 3132, 3086, 3650, 3158, 2908, 2674, 3060, 3578, 2914, 3116, 3600, 3636, 3994, 3460, 3902, 3300, 2678, 4172, 3966, 5298, 4480, 5168, 5100, 5100, 4850, 4588, 4934, 4340, 4206, 4256, 3970, 4052, 5224, 5764, 5682, 5738, 5418, 4894, 4652, 3588, 3020, 2734, 2458, 1994, 1810, 1206, 620, 762, 1006, 1352, 1558, 2242, 2572, 2252, 2054, 1974, 2384, 2418, 3848, 3802, 4260, 3006, 2798, 2922, 3496, 4086, 3766, 3060, 3492, 3174, 4424, 4732, 4188, 3712, 3192, 4386, 5394, 5934, 6040, 4926, 4582, 5360, 5702, 5102, 5100, 5928, 5516, 5332, 5764, 5304, 4314, 3642, 3100, 2240, 1776, 982, 646, 544, 680, 68, 962, 848, 1506, 1924, 1838, 1256, 1956, 2012, 2906, 3802, 3080, 2420, 2222, 3284, 2688, 3062, 3110, 3792, 3692, 5324, 4890, 4486, 4864, 4608, 4478, 4350, 4070, 4356, 4220, 4176, 3930, 3456, 2490, 2530, 4688, 4152, 5292, 5676, 6058, 6114, 5986, 5558, 5014, 4938, 5156, 5450, 4620, 4504, 4110, 3574, 3112, 2270, 1924, 1434, 1206, 492, 512, 1346, 1150, -160, 2288, 2290, 1552, 1956, 2746, 2724, 2178, 2118, 2702, 2534, 2492, 2646, 2674, 3102, 3400, 4058, 4330, 3546, 3532, 3598, 3134, 3092, 3290, 3822, 4100, 4720, 4482, 5030, 4976, 4544, 4496, 4812, 3982, 3486, 5390, 5458, 5618, 5570, 4774, 4360, 4522, 4964, 5020, 4554, 4586, 4884, 4324, 3794, 3712, 2924, 2634, 2224, 2058, 2178, 1860, 1530, 1128, 1588, 1532, 1514, 876, 656, 1588, 1508, 1348, 1580, 1768, 2050, 2080, 2200, 2136, 2806, 2732, 4184, 4278, 3196, 2950, 3476, 3326, 3192};
        int testDataLength = testData.length;
        List<Integer> filteredData = new ArrayList<Integer>();
        for(int i = 0; i < testDataLength; i++) {
            if ((i == 0) || (i + 1 == testDataLength)) {
                // = n
                filteredData.add(testData[i]);
            } else if ((i == 1) || (i + 2 == testDataLength)) {
                // = ((n-1) + n + (n+1))/3
                filteredData.add((testData[i - 1] + testData[i] + testData[i + 1]) / 3);
            } else if ((i == 2) || (i + 3 == testDataLength)) {
                // = ((n-2) + (n-1) + n + (n+1) + (n+2))/5
                filteredData.add((testData[i - 2] + testData[i - 1] + testData[i] + testData[i + 1] + testData[i + 2]) / 5);
            } else {
                // = ((n-2) + (n-1) + n + (n+1) + (n+2))/7
                filteredData.add((testData[i - 3] + testData[i - 2] + testData[i - 1] + testData[i] + testData[i + 1] + testData[i + 2] + testData[i + 3]) / 7);
            }
        }
        System.out.println(filteredData);
    }
    // Main
    public static void main(String[] args) {
        filterCombingData();
    }
}
